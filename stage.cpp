//----------------------------------
//	IsekaiKanchoProject
//	By ゲヱム道館門下生
//----------------------------------

#include "DxLib.h"
#include "main.h"
#include "stage.h"

// マップ画像用
int FieldMap[3][256];

XY map[MAP_Y_FIELD][MAP_X_FIELD];
XY mapPos;

// フィールドマップ
int Field[MAP_Y_FIELD][MAP_X_FIELD] = {
	{448,449,450,451,452,453,454,455,256,256,256,256,256,512,513,513,513,513,514,286,287,512,513,513,513,513,513,513,513,513,514,256,256,256,256,256,256,256,256,256},
	{456,457,458,459,460,461,462,463,256,256,256,256,256,512,513,513,513,513,514,286,287,512,513,513,513,513,229,230,231,513,514,256,256,256,256,256,256,256,256,256},
	{464,465,466,467,468,469,470,471,256,256,256,256,256,520,521,521,521,521,522,286,287,520,521,521,521,521,199,246,215,521,522,256,256,256,256,256,256,256,256,256},
	{472,473,474,475,476,477,478,479,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{480,481,482,483,484,485,486,487,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{276,271,271,271,277,278,279,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{292,270,270,406,287,294,295,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,310,286,287,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,286,287,256,256,310,256,256,256,256,256,256,256,256,310,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,286,287,256,256,310,256,256,256,256,256,256,262,256,310,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,286,422,271,271,271,277,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,407,270,270,270,270,293,256,256,256,256,256,256,256,256,256,256,256,256,256,310,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,256,302,302,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,256,302,302,302,302,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,256,302,302,302,302,256,256,256,256,256,256,256,256,256,256,256,256,256,310,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,256,302,302,302,302,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,448,449,454,455,256,256,256,256,256,256,256,256,256,256,256,310,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,456,457,458,463,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256},
	{256,256,464,465,466,471,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,276,271,271,271,277,256,256,256,256,256,256,256,256},
	{256,256,472,473,474,479,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,292,270,270,270,293,256,256,256,256,256,256,256,256},
	{256,256,480,481,482,487,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,509,509,509,509,509,509,509,509,509,256,256,256,256,256,256},
	{448,449,454,455,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,498,537,537,537,537,537,537,537,537,537,496,256,256,256,256,256},
	{456,457,458,463,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,498,563,563,564,563,563,563,563,562,563,496,256,256,256,256,256},
	{464,465,466,471,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,498,563,562,563,560,561,562,563,563,564,496,256,256,256,256,256},
	{472,473,474,479,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,498,562,564,563,568,569,562,563,562,563,496,256,256,256,256,256},
	{480,481,482,487,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,498,564,563,562,563,563,562,563,564,562,496,256,256,256,256,256},
};


// ステージ関連の初期化
void StageSystemInit(void)
{

	// ステージの描画読み込み
	// 地上のマップ
	LoadDivGraph("image/stage/field_grass.png",  192, 16, 12, MAP_IMAGESIZE_X, MAP_IMAGESIZE_Y, FieldMap[0]);
	LoadDivGraph("image/stage/field_forest.png", 128,  8, 16, MAP_IMAGESIZE_X, MAP_IMAGESIZE_Y, FieldMap[1]);
	LoadDivGraph("image/stage/field_obj.png",    256, 16, 16, MAP_IMAGESIZE_X, MAP_IMAGESIZE_Y, FieldMap[2]);

}

// ステージのゲーム毎の初期化
void StageGameInit(void)
{
	mapPos = { 0,0 };
}

XY GetStageSize(void)
{
	return { MAP_X_FIELD,MAP_Y_FIELD };
}

// ステージ関連の描画
void StageGameDraw(XY mapPos)
{
	// フィールド用
	for (int y = 0; y <= MAP_Y_FIELD; y++)
	{
		for (int x = 0; x <= MAP_X_FIELD; x++)
		{
			if (Field[y][x] >= 448)
			{
				DrawGraph(x * MAP_IMAGESIZE_X - mapPos.x, y * MAP_IMAGESIZE_Y - mapPos.y, FieldMap[1][Field[y][x] - 448], true);

			}
			else if (Field[y][x] >= 256)
			{
				DrawGraph(x * MAP_IMAGESIZE_X - mapPos.x, y * MAP_IMAGESIZE_Y - mapPos.y, FieldMap[0][Field[y][x] - 256], true);
			}
			else
			{
				DrawGraph(x * MAP_IMAGESIZE_X - mapPos.x, y * MAP_IMAGESIZE_Y - mapPos.y, FieldMap[2][Field[y][x]], true);
			}
		}
	}
}

// プレイヤーが次のブロックを通過できるか判定
bool IsPass(XY pos)
{
	XY Index;

	Index = PosToIndex(pos);

	switch (Field[Index.y][Index.x])
	{
	// 土凹
	case 262:
	// 土凹集団
	case 278:
	case 279:
	case 280:
	case 281:
	// 木
	case 448:
	case 449:
	case 450:
	case 451:
	case 452:
	case 453:
	case 454:
	case 455:
	case 456:
	case 457:
	case 458:
	case 459:
	case 460:
	case 461:
	case 462:
	case 463:
	case 464:
	case 465:
	case 466:
	case 467:
	case 468:
	case 469:
	case 470:
	case 471:
	case 472:
	case 473:
	case 474:
	case 475:
	case 476:
	case 477:
	case 478:
	case 479:
	case 480:
	case 481:
	case 482:
	case 483:
	case 484:
	case 485:
	case 486:
	case 487:
	// 崖
	case 496:
	case 498:
	case 509:
	case 512:
	case 513:
	case 514:
	case 520:
	case 521:
	case 522:
	case 537:
// ダンジョン穴
	case 199:
	case 215:
	case 229:
	case 231:
		return false;
	default:
		break;
	}

	return true;
}

// プレイヤーの座標をマップインデックスにして返す
XY PosToIndex(XY pos)
{
	XY rtnIndex;

	rtnIndex.x = pos.x / MAP_IMAGESIZE_X;
	rtnIndex.y = pos.y / MAP_IMAGESIZE_Y;

	return rtnIndex;
}

XY StageControl(XY playerMoveDiff)
{
	mapPos.x += playerMoveDiff.x;
	mapPos.y += playerMoveDiff.y;

	return mapPos;
}

XY GetMapPos(void)
{
	return mapPos;
}